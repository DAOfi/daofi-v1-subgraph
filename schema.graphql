type DAOfiFactory @entity {
  # factory address
  id: ID!

  # pair info
  pairCount: Int!

  # total volume
  totalVolumeXDAI: BigDecimal!
  totalVolumeETH: BigDecimal!

  # untracked values - less confident USD scores
  untrackedVolumeXDAI: BigDecimal!

  # total liquidity
  totalLiquidityXDAI: BigDecimal!
  totalLiquidityETH: BigDecimal!

  # transactions
  txCount: BigInt!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeXDAI: BigDecimal!
  untrackedVolumeXDAI: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
  derivedETH: BigDecimal
}

type Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  tokenBase: Token!
  tokenQuote: Token!
  pairOwner: Bytes!
  slopeNumerator: BigInt!
  n: BigInt!
  fee: BigInt!
  reserveBase: BigDecimal!
  reserveQuote: BigDecimal!
  supply: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveETH: BigDecimal!
  reserveXDAI: BigDecimal!
  trackedReserveETH: BigDecimal! # used for separating per pair reserves and global
  # Price in terms of the asset pair
  tokenBasePrice: BigDecimal!
  tokenQuotePrice: BigDecimal!

  # lifetime volume stats
  volumeTokenBase: BigDecimal!
  volumeTokenQuote: BigDecimal!
  volumeXDAI: BigDecimal!
  untrackedVolumeXDAI: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
}

type User @entity {
  id: ID!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
  usdSwapped: BigDecimal!
}

type LiquidityPosition @entity {
  id: ID!
  user: User!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
  historicalSnapshots: [LiquidityPositionSnapshot]! @derivedFrom(field: "liquidityPosition")
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: Pair! # reference to pair
  tokenBasePriceXDAI: BigDecimal! # snapshot of tokenBase price
  tokenQuotePriceXDAI: BigDecimal! # snapshot of tokenQuote price
  reserveBase: BigDecimal! # snapshot of pair tokenBase reserves
  reserveQuote: BigDecimal! # snapshot of pair tokenQuote reserves
  reserveXDAI: BigDecimal! # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
  liquidityTokenBalance: BigDecimal! # snapshot of users pool token balance
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  swaps: [Swap]!
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: Bytes!
  tokenBase: Bytes!
  tokenQuote: Bytes!
  tokenIn: Bytes!
  tokenOut: Bytes!
  amountIn: BigDecimal!
  amountOut: BigDecimal!
  to: Bytes!
  logIndex: BigInt

  # derived info
  amountXDAI: BigDecimal!
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd
}

# Data accumulated and condensed into day stats for all of DAOfi
type DAOfiDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  dailyVolumeETH: BigDecimal!
  dailyVolumeXDAI: BigDecimal!
  dailyVolumeUntracked: BigDecimal!

  totalVolumeETH: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalVolumeXDAI: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityXDAI: BigDecimal!

  txCount: BigInt!
}

type PairHourData @entity {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pair: Pair!

  # reserves
  reserveBase: BigDecimal!
  reserveQuote: BigDecimal!

  # derived liquidity
  reserveXDAI: BigDecimal!

  # volume stats
  hourlyVolumeTokenBase: BigDecimal!
  hourlyVolumeTokenQuote: BigDecimal!
  hourlyVolumeXDAI: BigDecimal!
  hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PairDayData @entity {
  id: ID!
  date: Int!
  pairAddress: Bytes!
  tokenBase: Token!
  tokenQuote: Token!

  # reserves
  reserveBase: BigDecimal!
  reserveQuote: BigDecimal!
  supply: BigDecimal!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # derived liquidity
  reserveXDAI: BigDecimal!

  # volume stats
  dailyVolumeTokenBase: BigDecimal!
  dailyVolumeTokenQuote: BigDecimal!
  dailyVolumeXDAI: BigDecimal!
  dailyTxns: BigInt!
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeETH: BigDecimal!
  dailyVolumeXDAI: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalLiquidityXDAI: BigDecimal!

  # price stats
  priceXDAI: BigDecimal!
}
